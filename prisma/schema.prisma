// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider = "zod-prisma-types"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  username    String   @unique
  email       String   @unique
  password    String
  firstName   String
  lastName    String
  role        Role
  institution String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  projects           Project[]
  comments           Comment[]
  collaborations     ProjectCollaborator[]
  stars              ProjectStar[]
  facultyAssignments FacultyAssignment[]
  pullRequests       PullRequest[]

  @@map("users")
}

model Project {
  id          String            @id @default(cuid())
  title       String
  description String
  category    String
  visibility  Visibility
  status      ProjectStatus
  techStack   String[]
  githubUrl   String?
  demoUrl     String?
  ownerId     String
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  // Relations
  owner                User                  @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  collaborators        ProjectCollaborator[]
  comments             Comment[]
  stars                ProjectStar[]
  facultyAssignments   FacultyAssignment[]
  files                ProjectFile[]
  pullRequests         PullRequest[]

  @@map("projects")
}

model ProjectCollaborator {
  id        String   @id @default(cuid())
  projectId String
  userId    String
  addedAt   DateTime @default(now())

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
  @@map("project_collaborators")
}

model ProjectStar {
  id        String   @id @default(cuid())
  projectId String
  userId    String
  createdAt DateTime @default(now())

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
  @@map("project_stars")
}

model Comment {
  id        String   @id @default(cuid())
  projectId String
  userId    String
  content   String
  createdAt DateTime @default(now())

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model FacultyAssignment {
  id           String       @id @default(cuid())
  projectId    String
  facultyId    String
  assignedAt   DateTime     @default(now())
  reviewStatus ReviewStatus @default(PENDING)
  grade        String?
  feedback     String?
  reviewedAt   DateTime?

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  faculty User    @relation(fields: [facultyId], references: [id], onDelete: Cascade)

  @@map("faculty_assignments")
}

model ProjectFile {
  id         String   @id @default(cuid())
  projectId  String
  fileName   String
  filePath   String
  fileSize   Int
  uploadedAt DateTime @default(now())

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("project_files")
}

model PullRequest {
  id              String          @id @default(cuid())
  projectId       String
  collaboratorId  String
  title           String
  description     String?
  summary         String?
  status          PullRequestStatus @default(PENDING)
  changes         Json?           // Store file changes as JSON
  changedFiles    String[]        // List of changed file paths
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  reviewedAt      DateTime?
  mergedAt        DateTime?
  rejectedAt      DateTime?

  // Relations
  project      Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  collaborator User    @relation(fields: [collaboratorId], references: [id], onDelete: Cascade)

  @@map("pull_requests")
}

model ChangeLog {
  id              String          @id @default(cuid())
  pullRequestId   String
  fileName        String
  filePath        String
  changeType      ChangeType
  oldContent      String?
  newContent      String?
  lineNumber      Int?
  createdAt       DateTime        @default(now())

  // Relations
  pullRequest PullRequest @relation(fields: [pullRequestId], references: [id], onDelete: Cascade)

  @@map("change_logs")
}

enum Role {
  STUDENT
  FACULTY
  ADMIN
}

enum Visibility {
  PRIVATE
  INSTITUTION
  PUBLIC
}

enum ProjectStatus {
  DRAFT
  SUBMITTED
  UNDER_REVIEW
  APPROVED
}

enum ReviewStatus {
  PENDING
  COMPLETED
}

enum PullRequestStatus {
  PENDING
  APPROVED
  REJECTED
  MERGED
}

enum ChangeType {
  ADDED
  MODIFIED
  DELETED
  RENAMED
}